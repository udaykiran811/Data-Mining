{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/udaykiran811/Data-Mining/blob/main/Assignment_4\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from scipy import stats"
      ],
      "metadata": {
        "id": "sqn222RS3M5E"
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Generate synthetic dataset\n",
        "np.random.seed(42)\n",
        "n_samples = 200"
      ],
      "metadata": {
        "id": "vE611hNi5x4b"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data = {\n",
        "    \"Age\": np.random.normal(loc=35, scale=10, size=n_samples).astype(int),\n",
        "    \"Annual Income\": np.random.normal(loc=60000, scale=15000, size=n_samples).astype(int),\n",
        "    \"Spending Score\": np.random.normal(loc=50, scale=20, size=n_samples).astype(int),\n",
        "    \"Credit Score\": np.random.normal(loc=700, scale=50, size=n_samples).astype(int),\n",
        "}"
      ],
      "metadata": {
        "id": "YwZR9Ka85876"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.DataFrame(data)"
      ],
      "metadata": {
        "id": "wBY3W2X_6B5K"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Introduce artificial outliers\n",
        "df.loc[5, \"Annual Income\"] = 200000  # Extreme high income\n",
        "df.loc[15, \"Spending Score\"] = 0     # Extreme low spending score\n",
        "df.loc[25, \"Credit Score\"] = 300     # Extremely low credit score"
      ],
      "metadata": {
        "id": "7VOEiryy6IL8"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        " #Selecting numerical features\n",
        "features = [\"Age\", \"Annual Income\", \"Spending Score\", \"Credit Score\"]\n",
        "X = df[features].copy()"
      ],
      "metadata": {
        "id": "A9u-7Tw76PCS"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "### Method 1: Z-Score Outlier Detection ###\n",
        "z_scores = np.abs(stats.zscore(X))\n",
        "outliers_z = (z_scores > 3)  # Flag values with Z-score > 3"
      ],
      "metadata": {
        "id": "PUVwCnH26YPK"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Z-Score Outlier Count:\\n\", outliers_z.sum())"
      ],
      "metadata": {
        "id": "-k-N6jN06bDK",
        "outputId": "019a3f35-4354-4ea8-ce73-b7acfed837fd",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Z-Score Outlier Count:\n",
            " Age               0\n",
            "Annual Income     2\n",
            "Spending Score    1\n",
            "Credit Score      1\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "### Method 2: IQR Outlier Detection ###\n",
        "Q1 = X.quantile(0.25)\n",
        "Q3 = X.quantile(0.75)\n",
        "IQR = Q3 - Q1\n",
        "lower_bound = Q1 - 1.5 * IQR\n",
        "upper_bound = Q3 + 1.5 * IQR"
      ],
      "metadata": {
        "id": "AwG-mBNz6g6y"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "outliers_iqr = ((X < lower_bound) | (X > upper_bound))"
      ],
      "metadata": {
        "id": "6O3dhfdo6kcC"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"\\nIQR Outlier Count:\\n\", outliers_iqr.sum())"
      ],
      "metadata": {
        "id": "QwPXTKHz6nrC",
        "outputId": "25828f09-357f-4470-d3d7-c0ceb4bed816",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "IQR Outlier Count:\n",
            " Age               3\n",
            "Annual Income     3\n",
            "Spending Score    1\n",
            "Credit Score      1\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "### Boxplot Visualization ###\n",
        "plt.figure(figsize=(12, 6))\n",
        "sns.boxplot(data=X)\n",
        "plt.title(\"Boxplot for Outlier Detection\")\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "quaVEayO60BC",
        "outputId": "9659f45b-812f-4892-a7d8-183818e72fda",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 545
        }
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "### Handling Outliers ###\n",
        "# Method 1: Capping (Clip values)\n",
        "X_capped = X.clip(lower=lower_bound, upper=upper_bound, axis=1)"
      ],
      "metadata": {
        "id": "Y7BBuu0762eS"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        " #Method 2: Remove Outliers\n",
        "X_removed = X[~outliers_iqr.any(axis=1)]  # Remove rows with any outlier\n"
      ],
      "metadata": {
        "id": "mdkc1M8m68my"
      },
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Method 3: Imputation (Replace outliers with median)\n",
        "X_imputed = X.copy()\n",
        "for col in X.columns:\n",
        "    X_imputed[col] = np.where(outliers_iqr[col], X[col].median(), X[col])"
      ],
      "metadata": {
        "id": "yIhW85687GXq"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Compare Data Shapes\n",
        "print(\"\\nOriginal Shape:\", X.shape)\n",
        "print(\"After Removing Outliers:\", X_removed.shape)"
      ],
      "metadata": {
        "id": "qCf4B8Ha7JkK",
        "outputId": "773007ad-6a3f-4dac-96d3-bb320ac1ce7b",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Original Shape: (200, 4)\n",
            "After Removing Outliers: (192, 4)\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "name": "Welcome To Colab",
      "toc_visible": true,
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}